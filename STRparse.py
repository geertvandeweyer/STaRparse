#!/usr/bin/env python3

import sys, os, argparse
globdir = os.path.dirname(os.path.realpath(__file__))

class STRparse(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Tool for managing data generated by STR genotyping tools',
            usage='''STRparse <command> [<args>]

The available commands are:
    vcfparse        Collects relevant data from VCF files.
    summaries       Summarizes data generated by vcfparse.
    jsonparse       Collects coverage data from JSON files.
    individual      Generate files with significantly abberant repeats for sample
    fullanalysis    Exectutes all STRparse commands.

''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def fullanalysis(self):
        global globdir
        sys.path.insert(1, globdir + "/Source/fullanalysis")
        parser = argparse.ArgumentParser(description='Run the all STRparse functions (VCF & JSON parse, filter, and summarize).')
        parser.add_argument('-v', '--vcfinput', type=str, metavar="", required=True, help='Path to folder with VCF Input File(s)')
        parser.add_argument('-j', '--jsoninput', type=str, metavar="", required=True, help='Path to folder with JSON Input File(s)')
        parser.add_argument('-o', '--output', type=str, metavar="", required=True, help='Path to Output Folder')
        parser.add_argument('-s', '--savename', type=str, metavar="", required=True, help='Identifier for output filenames')
        parser.add_argument('-b', '--gbuild', type=str, metavar="", required=True, help='Specify reference genome build in use (19, 37 or 38)')
        parser.add_argument('-H','--humandb', type=str, metavar="", required=True, help='Path to folder with ANNOVAR data tables')
        parser.add_argument('-r', '--reference', type=str, metavar="", required=False, default=None, help="Path to a reference file for repeat stability (output from summaries)")
        args = parser.parse_args(sys.argv[2:])

        from fullanalysis_main import main
        main(args.vcfinput, args.jsoninput, args.output, args.savename, args.gbuild, args.humandb, globdir, args.reference)


    def vcfparse(self):
        global globdir
        sys.path.insert(1, globdir + "/Source/vcfparse")
        parser = argparse.ArgumentParser(description='Select VCF directory to be parsed.')
        parser.add_argument('-i', '--vcfinput', type=str, metavar="", required=True, help='Path to folder with VCF Input File(s)')
        parser.add_argument('-o', '--output', type=str, metavar="", required=True, help='Path to output folder for CSV Output File')
        parser.add_argument('-s', '--savename', type=str, metavar="", required=True, help='Identifier for output filenames')
        args = parser.parse_args(sys.argv[2:])

        from vcfparse_main import main
        main(args.vcfinput, args.output, args.savename)


    def summaries(self):
        global globdir
        sys.path.insert(1, globdir + "/Source/summaries")
        parser = argparse.ArgumentParser(description='Summarise STR reads')
        parser.add_argument('-i', '--csvinput', type=str, metavar="", required=True, help='Input CSV file path')
        parser.add_argument('-o', '--summaryoutput', type=str, metavar="", required=True, help='Summary output file path')
        parser.add_argument('-s', '--savename', type=str, metavar="", required=True, help='Identifier for output filenames')
        parser.add_argument('-b', '--gbuild', type=str, metavar="", required=True, help='Specify reference genome build in use (19, 37 or 38)')
        parser.add_argument('-H','--humandb', type=str, metavar="", required=True, help='Path to folder with ANNOVAR data tables')
        #parser.add_argument('-r', '--reference', type=str, metavar="", required=False, default=None, help="Path to a previously generated reference file for repeat stability")
        args = parser.parse_args(sys.argv[2:])

        from summaries_main import main
        main(args.csvinput, args.summaryoutput, args.savename, args.gbuild, args.humandb,  globdir)


    def jsonparse(self):
        global globdir
        sys.path.insert(1, globdir + "/Source/jsonparse")
        parser = argparse.ArgumentParser(description='Select JSON directory to be parsed.')
        parser.add_argument('-i', '--jsoninput', type=str, metavar="", required=True, help='Path to folder with JSON Input File(s)')
        parser.add_argument('-o', '--output', type=str, metavar="", required=True, help='CSV Output File Path')
        parser.add_argument('-s', '--savename', type=str, metavar="", required=True, help='JSON Output File Name')
        args = parser.parse_args(sys.argv[2:])

        from jsonparse_main import main
        main(args.jsoninput, args.output, args.savename, globdir)

    def filter(self):
        global globdir
        sys.path.insert(1, globdir + "/Source/filter")
        parser = argparse.ArgumentParser(description='Select VCF $ JSON files to filter.')
        parser.add_argument('-v', '--vcfinput', type=str, metavar="", required=True, help='VCF Input File Path')
        parser.add_argument('-j', '--jsoninput', type=str, metavar="", required=True, help='JSON Input File Path')
        parser.add_argument('-o', '--output', type=str, metavar="", required=True, help='Output Files Path')
        parser.add_argument('-s', '--savename', type=str, metavar="", required=True, help='Files Save-name')
        args = parser.parse_args(sys.argv[2:])

        from filter_main import main
        main(args.vcfinput, args.jsoninput, args.output, args.savename, globdir)

    def individual(self):
        global globdir
        sys.path.insert(1, globdir + "/Source/individual_results")
        parser = argparse.ArgumentParser(description='Extract significantly aberrant repeats.')
        parser.add_argument('-i', '--csvinput', type=str, metavar="", required=True, help='Input CSV file path (from filter)')
        parser.add_argument('-j', '--jsoninput', type=str, metavar="", required=True, help='Path to folder with expansion hunter JSON output files')
        parser.add_argument('-o', '--output', type=str, metavar="", required=True, help='output file path')
        parser.add_argument('-s', '--savename', type=str, metavar="", required=True, help='Identifier for output filenames')
        parser.add_argument('-r', '--reference', type=str, metavar="", required=False, default=None, help="Path to a previously generated reference file for repeat stability (from summaries)")
        args = parser.parse_args(sys.argv[2:])

        from individuals_main import main
        main(args.csvinput, args.jsoninput, args.output, args.savename,   globdir, args.reference)



if __name__ == '__main__':
    STRparse()
